// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: membership.sql

package db

import (
	"context"
	"database/sql"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO membership (
    userid ,member_type,expiry_date
) VALUES (
             $1, $2, $3
         ) RETURNING id, userid, member_type, expiry_date
`

type CreateMembershipParams struct {
	Userid     int64        `json:"userid"`
	MemberType int32        `json:"member_type"`
	ExpiryDate sql.NullTime `json:"expiry_date"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership, arg.Userid, arg.MemberType, arg.ExpiryDate)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.MemberType,
		&i.ExpiryDate,
	)
	return i, err
}

const getMembership = `-- name: GetMembership :one
SELECT id, userid, member_type, expiry_date FROM membership
WHERE userid = $1 LIMIT 1
`

func (q *Queries) GetMembership(ctx context.Context, userid int64) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembership, userid)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.MemberType,
		&i.ExpiryDate,
	)
	return i, err
}
