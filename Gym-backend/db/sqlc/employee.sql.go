// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: employee.sql

package db

import (
	"context"
	"database/sql"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee (
    name,
    email,
    hashedpassword,
    locationid
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, name, email, hashedpassword, locationid, created_at
`

type CreateEmployeeParams struct {
	Name           string        `json:"name"`
	Email          int64         `json:"email"`
	Hashedpassword string        `json:"hashedpassword"`
	Locationid     sql.NullInt64 `json:"locationid"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.Name,
		arg.Email,
		arg.Hashedpassword,
		arg.Locationid,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Locationid,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, name, email, hashedpassword, locationid, created_at FROM employee
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Locationid,
		&i.CreatedAt,
	)
	return i, err
}
